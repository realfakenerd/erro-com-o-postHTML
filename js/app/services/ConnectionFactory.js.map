{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","console","log","onsuccess","bind","onerror","error","name","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIN,UAAJ,EAAgB;AACZK,wCAAQL,UAAR;AACA;AACH;;AAED,gCAAIO,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACAC,wCAAQC,GAAR,CAAY,eAAZ;AAEH,6BAJD;AAKAV,wCAAYW,SAAZ,GAAwB,aAAK;;AAEzBlB,6CAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,wCAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,2CAAWC,KAAX,GAAmB,YAAM;AACrB,0CAAM,IAAIE,KAAJ,CAAU,mEAAV,CAAN;AACH,iCAFD;AAGAE,wCAAQL,UAAR;AAEH,6BATD;AAUAO,wCAAYa,OAAZ,GAAsB,aAAK;AACvBJ,wCAAQC,GAAR,CAAYJ,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBA3BM,CAAP;AA4BH;;;kDACoBtB,U,EAAY;AAC7B,4BAAIA,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqC3B,MAArC,CAAJ,EACIG,WAAWyB,iBAAX,CAA6B5B,MAA7B;AACJG,mCAAW0B,iBAAX,CAA6B7B,MAA7B,EAAqC,EAAE8B,eAAe,IAAjB,EAArC;AACH;;;sDACwB;AACrB,4BAAI3B,UAAJ,EAAgB;AACZC;AACAD,yCAAa,IAAb;AACH;AACDgB,gCAAQC,GAAR,CAAY,iBAAZ;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\r\nconst version = 1;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (connection) {\r\n                resolve(connection);\r\n                return;\r\n            }\r\n\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                ConnectionFactory._createStores(e.target.result);\r\n                console.log('Upgrade DB...');\r\n\r\n            }\r\n            openRequest.onsuccess = e => {\r\n\r\n                connection = e.target.result;\r\n                close = connection.close.bind(connection);\r\n                connection.close = () => {\r\n                    throw new Error('Utilize ConnectionFactory.closeConnection() para fechar a conexão');\r\n                }\r\n                resolve(connection);\r\n\r\n            }\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            }\r\n        });\r\n    }\r\n    static _createStores(connection) {\r\n        if (connection.objectStoreNames.contains(stores))\r\n            connection.deleteObjectStore(stores);\r\n        connection.createObjectStore(stores, { autoIncrement: true });\r\n    }\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n        console.log('Conexão fechada');\r\n    }\r\n}"]}