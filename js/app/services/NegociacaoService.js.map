{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDAO","Negociacao","NegociacaoService","_http","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","err","Error","Promise","all","getNegociacaoSemana","getNegociacaoSemanaPassada","getNegociacaoSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","getConnection","conexao","adiciona","connection","listAll","delAll","listaAtual","getNegociacao","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { NegociacaoDAO } from '../dao/NegociacaoDAO';\r\nimport { Negociacao } from '../models/Negociacao';\r\nexport class NegociacaoService {\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n    getNegociacaoSemana() {\r\n        return this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana!');\r\n            });\r\n    }\r\n    getNegociacaoSemanaPassada() {\r\n        return this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana passada!');\r\n            });\r\n    }\r\n    getNegociacaoSemanaRetrasada() {\r\n        return this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações da semana retrasada!');\r\n            });\r\n    }\r\n    getNegociacao() {\r\n        return Promise.all([\r\n            this.getNegociacaoSemana(),\r\n            this.getNegociacaoSemanaPassada(),\r\n            this.getNegociacaoSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), []);\r\n            return negociacoes;\r\n        }).catch(err => {\r\n            throw new Error(err)\r\n        })\r\n    }\r\n    cadastraService(negociacao) {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(conexao => new NegociacaoDAO(conexao).adiciona(negociacao))\r\n            .then(() => console.log('Negociação cadastrada com sucesso'))\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error(\"Não foi possível adicionar a negociação\")\r\n            });\r\n    }\r\n    listService() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection).listAll())\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível obter as negociações')\r\n            });\r\n    }\r\n    delService() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDAO(connection).delAll())\r\n            .then(() => 'Negociações apagadas com sucesso!')\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível apagar as negociações')\r\n            });\r\n    }\r\n    importService(listaAtual) {\r\n        return this.getNegociacao()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        negociacao.isEquals(negociacaoExistente))))\r\n            .catch(err => {\r\n                console.log(err);\r\n                throw new Error('Não foi possível importar as negociações');\r\n            });\r\n    }\r\n}\r\n"]}